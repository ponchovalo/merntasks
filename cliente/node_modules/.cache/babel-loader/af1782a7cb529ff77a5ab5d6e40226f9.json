{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng; // Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\n\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","map":{"version":3,"sources":["C:/CURSOS/MERN/MERNTasks/cliente/node_modules/uuid/dist/rng-browser.js"],"names":["Object","defineProperty","exports","value","default","rng","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,GAAlB,C,CACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,eAAxC,IAA2DC,MAAM,CAACD,eAAP,CAAuBE,IAAvB,CAA4BD,MAA5B,CAA3D,IAAkG,OAAOE,QAAP,KAAoB,WAApB,IAAmC,OAAOA,QAAQ,CAACH,eAAhB,KAAoC,UAAvE,IAAqFG,QAAQ,CAACH,eAAT,CAAyBE,IAAzB,CAA8BC,QAA9B,CAA/M;AACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd;;AAEA,SAASN,GAAT,GAAe;AACb,MAAI,CAACC,eAAL,EAAsB;AACpB,UAAM,IAAIM,KAAJ,CAAU,0GAAV,CAAN;AACD;;AAED,SAAON,eAAe,CAACI,KAAD,CAAtB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}"]},"metadata":{},"sourceType":"script"}